//create array of primes from 2 to n<65000
//factor random number using this primes array
//put factor information into structure
#include<iostream>
#include<iomanip>
#include<stdlib.h>
#include<time.h>
using namespace std;

unsigned short int *genPrime(const int);	//generate an array of primes n<65000
void outputArr(unsigned short int *);
void outputArr(unsigned short int **);
bool isPrime(unsigned short int *,unsigned short int);
unsigned short int **factorToPrimes(unsigned short int *,unsigned short int);	//row:prime || column:exponent
void destroy(unsigned short int **);
int main(){
	srand(static_cast<unsigned int>(time(0)));

	const int RANGE = 65000;
	unsigned short int *primePtr;
	unsigned short int **factorPtr;
	unsigned short int n = rand()%65000+1;

	primePtr = genPrime(RANGE);
	outputArr(primePtr);

	factorPtr = factorToPrimes(primePtr,n);
	outputArr(factorPtr);

	delete [] primePtr;
	destroy(factorPtr);
	return 0;
}
void destroy(unsigned short int **array){
	int row = array[0][0];
    for(int r=0;r<row;r++){
        delete []array[r];
    }
    delete []array;
}
unsigned short int *genPrime(const int RANGE){
	int limit = RANGE%2?(RANGE+1)/2:RANGE/2;//odds are inclusive, evens are exclusive
	unsigned short int *primes = new unsigned short int [limit];
	bool isP = true;
	int pSize=1;
	primes[1]=2;	//primes[0] will hold the total number of primes
	for(int i=3;i<=RANGE;i+=2){
		isP=true;
		for(int j=3; isP && j<i ;j+=2){
			if(i%j==0)
				isP=false;
		}
		if(isP){
			primes[++pSize] = i;
		}
	}
	primes[0] = pSize;
	unsigned short int *newPrimes = new unsigned short int [pSize+1];
	for(int i=0;i<pSize;i++){
		newPrimes[i]=primes[i];
	}
	delete [] primes;
	return newPrimes;
}
unsigned short int **factorToPrime(unsigned short int *primes,unsigned short int n){
	int countPr=0;
	int countExp=0;

	unsigned short int tempN = n;
	if(isPrime(primes,tempN))
			countPr++;
	else{
		for(int i=1;tempN!=1 && i < primes[0];i++){
			if(tempN%primes[i] == 0){
				countPr++;
				while(tempN%primes[i]==0){
					tempN/=primes[i];
				}
			}
		}
	}
	unsigned short int **factors = new unsigned short int*[countPr+1];
	for(int i=0;i<countPr+1;i++){
		factors[i] = new unsigned short int;
	}
	factors[0][0] = countPr; // [0][1] contains number n
	factors[0][1] = n;
	int row = 1;
	for(int i=1;tempN!=1 && i< primes[0];i++){
		if(isPrime(primes,tempN)){
			factors[row][0]=tempN;
			factors[row][1]=++countExp;
			return factors;
		}
		else if(tempN%primes[i]==0){
			factors[row][0] = primes[i];
			while(tempN%primes[i]==0){
				tempN/=primes[i];
				countExp++;
			}
			factors[row][1] = countExp;
			countExp = 0;
			row++;
		}
	}
	return factors;	//redundant
}

void outputArr(unsigned short int *arr){
	int perLine = 5;
	int count = 0;
	cout << "total size: " << arr[0] << endl;
	for(int i=1;i<arr[0];i++){
		cout<<setw(6)<<arr[i];
		if(++count >= perLine){
			cout << endl;
			count = 0;
		}
	}
	return;
}
void outputArr(unsigned short int **arr){
	cout << "Number of Primes: " << arr[0][0] << endl;
	cout << "Factors of " << arr[0][1] << endl;
	cout << "--------------------" << endl;
	for(int i=1;i<arr[0][0];i++){
		cout << arr[i][0] << "^" << arr[i][1] << endl;
	}
	return;
}
bool isPrime(unsigned short int *primes,unsigned short int n){
	int size = primes[0];
	for(int i=1;i<size;i++){
		if(primes[i]==n)
			return true;
	}
	return false;
}
